---
---
<section id="contact" class="bg-white/80 backdrop-blur-lg rounded-3xl p-8 shadow-xl">
  <h3 class="text-2xl font-semibold mb-6">Contacto</h3>
  
  <div class="grid md:grid-cols-2 gap-8">
    <!-- Contact Form -->
    <div class="space-y-6">
      <!-- Success Message -->
      <div id="successMessage" class="hidden bg-green-50 border border-green-200 rounded-xl p-4">
        <div class="flex items-center gap-3">
          <svg class="w-5 h-5 text-green-600" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path>
          </svg>
          <p class="text-green-800 font-medium">¡Mensaje enviado exitosamente!</p>
        </div>
      </div>

      <!-- Error Message -->
      <div id="errorMessage" class="hidden bg-red-50 border border-red-200 rounded-xl p-4">
        <div class="flex items-center gap-3">
          <svg class="w-5 h-5 text-red-600" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"></path>
          </svg>
          <p class="text-red-800 font-medium" id="errorText">Ha ocurrido un error. Por favor, inténtalo de nuevo.</p>
        </div>
      </div>

      <form id="contactForm" class="space-y-6">
        <div>
          <label for="name" class="block text-sm font-medium text-apple-gray-400 mb-2">
            Nombre <span class="text-red-500">*</span>
          </label>
          <input
            type="text"
            id="name"
            name="name"
            required
            minlength="2"
            maxlength="50"
            class="w-full px-4 py-3 rounded-xl bg-white/50 border border-apple-gray-200 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-colors"
            placeholder="Tu nombre"
          />
          <p class="text-red-500 text-sm mt-1 hidden" id="nameError">Por favor ingresa un nombre válido (2-50 caracteres).</p>
        </div>
        
        <div>
          <label for="email" class="block text-sm font-medium text-apple-gray-400 mb-2">
            Correo Electrónico <span class="text-red-500">*</span>
          </label>
          <input
            type="email"
            id="email"
            name="email"
            required
            class="w-full px-4 py-3 rounded-xl bg-white/50 border border-apple-gray-200 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-colors"
            placeholder="tu@correo.com"
          />
          <p class="text-red-500 text-sm mt-1 hidden" id="emailError">Por favor ingresa un correo electrónico válido.</p>
        </div>
        
        <div>
          <label for="message" class="block text-sm font-medium text-apple-gray-400 mb-2">
            Mensaje <span class="text-red-500">*</span>
          </label>
          <textarea
            id="message"
            name="message"
            rows="4"
            required
            minlength="10"
            maxlength="500"
            class="w-full px-4 py-3 rounded-xl bg-white/50 border border-apple-gray-200 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-colors resize-none"
            placeholder="Tu mensaje (mínimo 10 caracteres)..."
          ></textarea>
          <div class="flex justify-between items-center mt-1">
            <p class="text-red-500 text-sm hidden" id="messageError">El mensaje debe tener entre 10 y 500 caracteres.</p>
            <p class="text-apple-gray-400 text-sm" id="charCount">0/500</p>
          </div>
        </div>
        
        <button
          type="submit"
          id="submitBtn"
          class="w-full bg-gradient-to-r from-blue-600 to-blue-700 text-white font-medium px-6 py-3 rounded-xl hover:from-blue-700 hover:to-blue-800 transition-all duration-200 shadow-lg hover:shadow-xl disabled:opacity-50 disabled:cursor-not-allowed"
        >
          <span id="btnText">Enviar Mensaje</span>
          <svg id="loadingSpinner" class="hidden animate-spin w-5 h-5 mx-auto" fill="none" viewBox="0 0 24 24">
            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
            <path class="opacity-75" fill="currentColor" d="m4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
          </svg>
        </button>
      </form>
    </div>
    
    <!-- Contact Information -->
    <div class="space-y-6">
      <div class="bg-blue-50 rounded-2xl p-6">
        <h4 class="text-lg font-medium text-apple-gray-500 mb-4">Información de Contacto</h4>
        <div class="space-y-4">
          <div class="flex items-center gap-3">
            <div class="w-10 h-10 flex items-center justify-center bg-blue-100 rounded-full">
              <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-5 h-5 text-blue-600">
                <path d="M1.5 8.67v8.58a3 3 0 003 3h15a3 3 0 003-3V8.67l-8.928 5.493a3 3 0 01-3.144 0L1.5 8.67z" />
                <path d="M22.5 6.908V6.75a3 3 0 00-3-3h-15a3 3 0 00-3 3v.158l9.714 5.978a1.5 1.5 0 001.572 0L22.5 6.908z" />
              </svg>
            </div>
            <a href="mailto:alex.baudelino@gmail.com" class="text-apple-gray-500 hover:text-blue-600 transition-colors">
              alex.baudelino@gmail.com
            </a>
          </div>
          
          <div class="flex items-center gap-3">
            <div class="w-10 h-10 flex items-center justify-center bg-blue-100 rounded-full">
              <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-5 h-5 text-blue-600">
                <path fill-rule="evenodd" d="M1.5 4.5a3 3 0 013-3h1.372c.86 0 1.61.586 1.819 1.42l1.105 4.423a1.875 1.875 0 01-.694 1.955l-1.293.97c-.135.101-.164.249-.126.352a11.285 11.285 0 006.697 6.697c.103.038.25.009.352-.126l.97-1.293a1.875 1.875 0 011.955-.694l4.423 1.105c.834.209 1.42.959 1.42 1.82V19.5a3 3 0 01-3 3h-2.25C8.552 22.5 1.5 15.448 1.5 6.75V4.5z" clip-rule="evenodd" />
              </svg>
            </div>
            <a href="tel:+573164742655" class="text-apple-gray-500 hover:text-blue-600 transition-colors">
              +57 316 474 2655
            </a>
          </div>
          
          <div class="flex items-center gap-3">
            <div class="w-10 h-10 flex items-center justify-center bg-blue-100 rounded-full">
              <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-5 h-5 text-blue-600">
                <path fill-rule="evenodd" d="M11.54 22.351l.07.04.028.016a.76.76 0 00.723 0l.028-.015.071-.041a16.975 16.975 0 001.144-.742 19.58 19.58 0 002.683-2.282c1.944-1.99 3.963-4.98 3.963-8.827a8.25 8.25 0 00-16.5 0c0 3.846 2.02 6.837 3.963 8.827a19.58 19.58 0 002.682 2.282 16.975 16.975 0 001.145.742zM12 13.5a3 3 0 100-6 3 3 0 000 6z" clip-rule="evenodd" />
              </svg>
            </div>
            <span class="text-apple-gray-500">
              Colombia
            </span>
          </div>
        </div>
      </div>
      
      <div class="bg-gradient-to-br from-blue-50 to-purple-50 rounded-2xl p-6">
        <h4 class="text-lg font-medium text-apple-gray-500 mb-4">Disponibilidad</h4>
        <div class="space-y-2 text-apple-gray-400">
          <p>Lunes - Viernes</p>
          <p class="font-medium text-apple-gray-500">8:00 AM - 5:00 PM COT</p>
        </div>
      </div>
    </div>
  </div>
</section>

<script>
document.addEventListener('DOMContentLoaded', () => {
  const form = document.getElementById('contactForm') as HTMLFormElement;
  const nameInput = document.getElementById('name') as HTMLInputElement;
  const emailInput = document.getElementById('email') as HTMLInputElement;
  const messageInput = document.getElementById('message') as HTMLTextAreaElement;
  const submitBtn = document.getElementById('submitBtn') as HTMLButtonElement;
  const btnText = document.getElementById('btnText') as HTMLSpanElement;
  const loadingSpinner = document.getElementById('loadingSpinner') as HTMLElement;
  const successMessage = document.getElementById('successMessage') as HTMLElement;
  const errorMessage = document.getElementById('errorMessage') as HTMLElement;
  const errorText = document.getElementById('errorText') as HTMLElement;
  const charCount = document.getElementById('charCount') as HTMLElement;

  // Error elements
  const nameError = document.getElementById('nameError') as HTMLElement;
  const emailError = document.getElementById('emailError') as HTMLElement;
  const messageError = document.getElementById('messageError') as HTMLElement;

  // Character counter for message
  messageInput.addEventListener('input', () => {
    const count = messageInput.value.length;
    charCount.textContent = `${count}/500`;
    
    if (count > 500) {
      charCount.classList.add('text-red-500');
      charCount.classList.remove('text-apple-gray-400');
    } else {
      charCount.classList.remove('text-red-500');
      charCount.classList.add('text-apple-gray-400');
    }
  });

  // Validation functions
  const validateName = (name: string): boolean => {
    return name.trim().length >= 2 && name.trim().length <= 50;
  };

  const validateEmail = (email: string): boolean => {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
  };

  const validateMessage = (message: string): boolean => {
    return message.trim().length >= 10 && message.trim().length <= 500;
  };

  // Real-time validation
  nameInput.addEventListener('blur', () => {
    if (!validateName(nameInput.value)) {
      nameInput.classList.add('border-red-500', 'focus:border-red-500');
      nameError.classList.remove('hidden');
    } else {
      nameInput.classList.remove('border-red-500', 'focus:border-red-500');
      nameError.classList.add('hidden');
    }
  });

  emailInput.addEventListener('blur', () => {
    if (!validateEmail(emailInput.value)) {
      emailInput.classList.add('border-red-500', 'focus:border-red-500');
      emailError.classList.remove('hidden');
    } else {
      emailInput.classList.remove('border-red-500', 'focus:border-red-500');
      emailError.classList.add('hidden');
    }
  });

  messageInput.addEventListener('blur', () => {
    if (!validateMessage(messageInput.value)) {
      messageInput.classList.add('border-red-500', 'focus:border-red-500');
      messageError.classList.remove('hidden');
    } else {
      messageInput.classList.remove('border-red-500', 'focus:border-red-500');
      messageError.classList.add('hidden');
    }
  });

  // Form submission
  form.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    // Hide previous messages
    successMessage.classList.add('hidden');
    errorMessage.classList.add('hidden');

    // Validate all fields
    const name = nameInput.value.trim();
    const email = emailInput.value.trim();
    const message = messageInput.value.trim();

    let isValid = true;

    if (!validateName(name)) {
      nameInput.classList.add('border-red-500');
      nameError.classList.remove('hidden');
      isValid = false;
    }

    if (!validateEmail(email)) {
      emailInput.classList.add('border-red-500');
      emailError.classList.remove('hidden');
      isValid = false;
    }

    if (!validateMessage(message)) {
      messageInput.classList.add('border-red-500');
      messageError.classList.remove('hidden');
      isValid = false;
    }

    if (!isValid) {
      errorText.textContent = 'Por favor corrige los errores en el formulario.';
      errorMessage.classList.remove('hidden');
      return;
    }

    // Show loading state
    submitBtn.disabled = true;
    btnText.classList.add('hidden');
    loadingSpinner.classList.remove('hidden');

    try {
      // Simulate form submission (replace with actual endpoint)
      const formData = new FormData();
      formData.append('name', name);
      formData.append('email', email);
      formData.append('message', message);

      // For demo purposes, we'll simulate a delay
      await new Promise(resolve => setTimeout(resolve, 2000));

      // Uncomment and modify this section for actual form submission:
      /*
      const response = await fetch('/api/contact', {
        method: 'POST',
        body: formData
      });

      if (!response.ok) {
        throw new Error('Error en el servidor');
      }
      */

      // Show success message
      successMessage.classList.remove('hidden');
      form.reset();
      charCount.textContent = '0/500';
      
      // Clear any validation errors
      [nameInput, emailInput, messageInput].forEach(input => {
        input.classList.remove('border-red-500', 'focus:border-red-500');
      });
      [nameError, emailError, messageError].forEach(error => {
        error.classList.add('hidden');
      });

    } catch (error) {
      console.error('Error sending message:', error);
      errorText.textContent = 'Ha ocurrido un error al enviar el mensaje. Por favor, inténtalo de nuevo o contacta directamente por email.';
      errorMessage.classList.remove('hidden');
    } finally {
      // Reset button state
      submitBtn.disabled = false;
      btnText.classList.remove('hidden');
      loadingSpinner.classList.add('hidden');
    }
  });
});
</script>

<style>
  /* Custom styles for form validation */
  .border-red-500 {
    border-color: #ef4444 !important;
  }
  
  .focus\:border-red-500:focus {
    border-color: #ef4444 !important;
    --tw-ring-color: rgb(248 113 113 / 0.2) !important;
  }

  @keyframes spin {
    to {
      transform: rotate(360deg);
    }
  }

  .animate-spin {
    animation: spin 1s linear infinite;
  }
</style>