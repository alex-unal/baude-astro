---
import Layout from './Layout.astro';

export interface Props {
  frontmatter: {
    title: string;
    date: string;
    category: string;
    author: string;
    readTime: string;
    description: string;
    featured?: boolean;
    tags?: string[];
  };
}

const { frontmatter } = Astro.props;

// Format date for display
const formatDate = (dateString: string) => {
  const date = new Date(dateString);
  return date.toLocaleDateString('es-ES', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });
};
---

<Layout title={`${frontmatter.title} | Blog`} description={frontmatter.description}>
  <main class="min-h-screen py-20 px-4 bg-gradient-to-br from-slate-50 to-blue-50">
    <div class="container mx-auto max-w-4xl">
      <!-- Navegación mejorada -->
      <header class="mb-12">
        <nav class="mb-8 flex justify-between items-center">
          <a 
            href="/blog" 
            class="group inline-flex items-center px-4 py-2 text-blue-700 bg-white/80 backdrop-blur-sm rounded-xl hover:bg-white hover:shadow-lg transition-all duration-300"
          >
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2 transform group-hover:-translate-x-1 transition-transform duration-300" viewBox="0 0 20 20" fill="currentColor">
              <path fill-rule="evenodd" d="M9.707 16.707a1 1 0 01-1.414 0l-6-6a1 1 0 010-1.414l6-6a1 1 0 011.414 1.414L5.414 9H17a1 1 0 110 2H5.414l4.293 4.293a1 1 0 010 1.414z" clip-rule="evenodd"></path>
            </svg>
            <span class="font-medium">Volver al Blog</span>
          </a>
          
          <div class="flex items-center space-x-3">
            <!-- Tiempo de lectura -->
            <span class="reading-time text-sm text-blue-600 bg-white/80 backdrop-blur-sm px-3 py-1.5 rounded-lg font-medium">
              {frontmatter.readTime}
            </span>

            <!-- Botón de compartir -->
            <button 
              id="share-btn"
              class="p-2 text-blue-600 hover:text-blue-800 bg-white/80 backdrop-blur-sm rounded-xl hover:bg-white hover:shadow-lg transition-all duration-300"
              title="Compartir artículo"
            >
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                <path d="M15 8a3 3 0 10-2.977-2.63l-4.94 2.47a3 3 0 100 4.319l4.94 2.47a3 3 0 10.895-1.789l-4.94-2.47a3.027 3.027 0 000-.74l4.94-2.47C13.456 7.68 14.19 8 15 8z"/>
              </svg>
            </button>
            
            <!-- Modo lectura -->
            <button 
              id="reading-mode"
              class="p-2 text-blue-600 hover:text-blue-800 bg-white/80 backdrop-blur-sm rounded-xl hover:bg-white hover:shadow-lg transition-all duration-300"
              title="Modo lectura"
            >
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                <path d="M9 4.804A7.968 7.968 0 005.5 4c-1.255 0-2.443.29-3.5.804v10A7.969 7.969 0 015.5 14c1.669 0 3.218.51 4.5 1.385A7.962 7.962 0 0114.5 14c1.255 0 2.443.29 3.5.804v-10A7.968 7.968 0 0014.5 4c-1.255 0-2.443.29-3.5.804V12a1 1 0 11-2 0V4.804z"/>
              </svg>
            </button>
          </div>
        </nav>

        <!-- Cabecera de artículo -->
        <div class="bg-white/80 backdrop-blur-lg rounded-2xl p-8 shadow-xl border border-white/20">
          <div class="space-y-6">
            <!-- Categoría y badge de destacado -->
            <div class="flex flex-wrap gap-3">
              <span class="px-4 py-2 bg-blue-100 text-blue-700 rounded-full text-sm font-medium border border-blue-200">
                {frontmatter.category}
              </span>
              {frontmatter.featured && (
                <span class="px-4 py-2 bg-gradient-to-r from-blue-600 to-blue-700 text-white rounded-full text-sm font-medium inline-flex items-center shadow-lg">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1.5" viewBox="0 0 20 20" fill="currentColor">
                    <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"/>
                  </svg>
                  Destacado
                </span>
              )}
            </div>

            <!-- Título grande y legible -->
            <h1 class="text-4xl md:text-5xl font-bold text-gray-900 leading-tight">
              {frontmatter.title}
            </h1>

            <!-- Metadatos del autor y fecha -->
            <div class="flex flex-wrap items-center gap-6 text-gray-600">
              <div class="flex items-center gap-2">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-blue-600" viewBox="0 0 20 20" fill="currentColor">
                  <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-6-3a2 2 0 11-4 0 2 2 0 014 0zm-2 4a5 5 0 00-4.546 2.916A5.986 5.986 0 0010 16a5.986 5.986 0 004.546-2.084A5 5 0 0010 11z" clip-rule="evenodd"/>
                </svg>
                <span class="font-medium">{frontmatter.author}</span>
              </div>
              <time 
                datetime={frontmatter.date}
                class="flex items-center gap-2"
              >
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-blue-600" viewBox="0 0 20 20" fill="currentColor">
                  <path fill-rule="evenodd" d="M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z" clip-rule="evenodd"/>
                </svg>
                {formatDate(frontmatter.date)}
              </time>
            </div>

            <!-- Tags con diseño moderno -->
            {frontmatter.tags && frontmatter.tags.length > 0 && (
              <div class="pt-4 border-t border-gray-200">
                <div class="flex flex-wrap gap-2">
                  {frontmatter.tags.map((tag: string) => (
                    <span class="px-3 py-1 bg-gray-100 hover:bg-gray-200 text-gray-700 rounded-full text-sm transition-colors duration-200">
                      #{tag}
                    </span>
                  ))}
                </div>
              </div>
            )}
          </div>
        </div>
      </header>

      <!-- Contenido del artículo -->
      <article class="prose prose-lg max-w-none">
        <div class="bg-white/80 backdrop-blur-lg rounded-2xl p-8 md:p-12 shadow-xl border border-white/20 blog-content">
          <slot />
        </div>
      </article>
    </div>
  </main>
</Layout>

<style is:global>
  /* Modo lectura */
  body.reading-mode {
    @apply bg-slate-100;
  }

  body.reading-mode .blog-content {
    @apply max-w-3xl mx-auto;
    font-size: 1.2rem;
    line-height: 1.8;
  }

  body.reading-mode nav {
    @apply opacity-50 hover:opacity-100 transition-opacity;
  }

  /* Tipografía optimizada para lectura */
  .blog-content {
    @apply text-gray-800;
    font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
    line-height: 1.7;
  }

  /* Jerarquía visual clara */
  .blog-content h1 {
    @apply text-4xl font-bold text-gray-900 mb-8 pb-4 border-b-2 border-gray-200;
    line-height: 1.2;
  }

  .blog-content h2 {
    @apply text-3xl font-semibold text-gray-800 mt-12 mb-6 relative pl-6;
  }

  .blog-content h2::before {
    content: '';
    @apply absolute left-0 top-1 bottom-1 w-1 bg-gradient-to-b from-blue-600 to-blue-700 rounded-full;
  }

  .blog-content h3 {
    @apply text-2xl font-medium text-gray-800 mt-8 mb-4;
  }

  .blog-content h4 {
    @apply text-xl font-medium text-gray-700 mt-6 mb-3;
  }

  /* Espaciado y márgenes mejorados */
  .blog-content p {
    @apply text-gray-700 leading-relaxed mb-6;
    font-size: 1.1rem;
  }

  .blog-content a {
    @apply text-blue-600 hover:text-blue-800 underline decoration-blue-300 hover:decoration-blue-600 transition-all duration-200;
    text-underline-offset: 3px;
  }

  .blog-content strong, .blog-content b {
    @apply text-gray-900 font-semibold;
  }

  .blog-content em, .blog-content i {
    @apply text-gray-700 italic;
  }

  /* Blockquotes mejorados */
  .blog-content blockquote {
    @apply relative pl-8 my-8 py-6 bg-gradient-to-r from-blue-50 to-transparent border-l-4 border-blue-500 rounded-r-lg;
  }

  .blog-content blockquote::before {
    content: '"';
    @apply absolute left-2 -top-2 text-6xl text-blue-300 font-serif leading-none;
  }

  .blog-content blockquote p {
    @apply text-blue-900 font-medium italic mb-0 text-lg;
  }

  /* Listas mejoradas */
  .blog-content ul {
    @apply space-y-3 mb-6 ml-6 list-none;
  }

  .blog-content ul li {
    @apply relative pl-6;
  }

  .blog-content ul li::before {
    content: '▸';
    @apply absolute left-0 text-blue-600 font-bold text-lg;
  }

  .blog-content ol {
    @apply space-y-3 mb-6 ml-6;
    counter-reset: custom-counter;
  }

  .blog-content ol li {
    @apply relative pl-8;
    counter-increment: custom-counter;
  }

  .blog-content ol li::before {
    content: counter(custom-counter);
    @apply absolute left-0 top-0 w-6 h-6 bg-blue-600 text-white rounded-full flex items-center justify-center text-sm font-bold;
  }

  /* Bloques de código con botón de copiar */
  .blog-content pre {
    @apply bg-gray-900 text-gray-100 rounded-xl p-6 my-8 overflow-x-auto relative shadow-lg;
    font-family: 'SF Mono', Monaco, 'Cascadia Code', 'Roboto Mono', Consolas, 'Courier New', monospace;
  }

  .blog-content code {
    @apply font-mono;
  }

  .blog-content :not(pre) > code {
    @apply bg-gray-100 text-gray-800 px-2 py-1 rounded text-sm;
  }

  .code-actions {
    @apply absolute right-3 top-3 opacity-0 group-hover:opacity-100 transition-opacity duration-200;
  }

  .blog-content pre:hover .code-actions {
    @apply opacity-100;
  }

  .code-button {
    @apply flex items-center gap-2 px-3 py-1.5 text-sm bg-gray-800 text-gray-300 rounded-lg hover:bg-gray-700 transition-all duration-200 shadow-lg;
  }

  .code-button.copied {
    @apply bg-green-700 text-white;
  }

  /* Tablas responsivas */
  .blog-content table {
    @apply w-full border-collapse my-8 bg-white rounded-lg overflow-hidden shadow-lg;
  }

  .blog-content thead {
    @apply bg-gradient-to-r from-blue-600 to-blue-700;
  }

  .blog-content th {
    @apply text-left py-4 px-6 font-semibold text-white text-sm uppercase tracking-wider;
  }

  .blog-content td {
    @apply py-4 px-6 border-b border-gray-200;
  }

  .blog-content tbody tr:nth-child(even) {
    @apply bg-gray-50;
  }

  .blog-content tbody tr:hover {
    @apply bg-blue-50 transition-colors duration-200;
  }

  /* Referencias formateadas en grid */
  .references-grid {
    @apply grid gap-4 mt-8;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
  }

  .reference-card {
    @apply bg-white p-4 rounded-xl shadow-sm border border-gray-200 flex gap-4 hover:shadow-md transition-shadow duration-200;
  }

  .reference-number {
    @apply w-8 h-8 bg-blue-600 text-white rounded-full flex items-center justify-center font-bold text-sm flex-shrink-0;
  }

  .reference-content {
    @apply flex-1;
  }

  .reference-content p {
    @apply text-sm text-gray-600 leading-relaxed m-0;
    font-family: 'SF Mono', Monaco, monospace;
  }

  /* Separadores */
  .blog-content hr {
    @apply border-0 h-px bg-gradient-to-r from-transparent via-gray-300 to-transparent my-12;
  }

  /* Animaciones suaves */
  .blog-content * {
    @apply transition-colors duration-200;
  }

  /* Diseño responsivo */
  @media (max-width: 768px) {
    .blog-content h1 { @apply text-3xl; }
    .blog-content h2 { @apply text-2xl pl-4; }
    .blog-content h3 { @apply text-xl; }
    
    .blog-content pre {
      @apply p-4 text-sm;
    }
    
    .code-button span {
      @apply hidden;
    }

    .blog-content table {
      @apply text-sm;
    }

    .blog-content th,
    .blog-content td {
      @apply px-3 py-2;
    }

    .references-grid {
      grid-template-columns: 1fr;
    }
  }

  @media (max-width: 640px) {
    body.reading-mode .blog-content {
      font-size: 1.1rem;
    }
  }
</style>

<script>
  // Gestión de referencias
  const processReferences = () => {
    const article = document.querySelector('.blog-content');
    if (!article) return;

    const headings = article.querySelectorAll('h2, h3');
    const referencesHeading = Array.from(headings).find(h => 
      h.textContent?.toLowerCase().includes('referencias')
    );

    if (referencesHeading) {
      const referenceTexts = [];
      let currentElement = referencesHeading.nextElementSibling;

      while (currentElement && !['H2', 'H3'].includes(currentElement.tagName)) {
        if (currentElement.tagName === 'P') {
          const text = currentElement.textContent?.trim();
          if (text?.length > 20) {
            referenceTexts.push(text);
            (currentElement as HTMLElement).style.display = 'none';
          }
        }
        currentElement = currentElement.nextElementSibling;
      }

      if (referenceTexts.length > 0) {
        const referencesContainer = document.createElement('div');
        referencesContainer.className = 'references-grid';
        referencesContainer.innerHTML = referenceTexts
          .map((ref, i) => `
            <div class="reference-card">
              <div class="reference-number">${i + 1}</div>
              <div class="reference-content">
                <p>${ref}</p>
              </div>
            </div>
          `).join('');

        referencesHeading.parentNode?.insertBefore(
          referencesContainer,
          referencesHeading.nextSibling
        );
      }
    }
  };

  // Gestión de bloques de código
  const processCodeBlocks = () => {
    const article = document.querySelector('.blog-content');
    if (!article) return;

    article.querySelectorAll('pre').forEach(pre => {
      pre.classList.add('group');
      
      const actions = document.createElement('div');
      actions.className = 'code-actions';

      const copyButton = document.createElement('button');
      copyButton.innerHTML = `
        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7v8a2 2 0 002 2h6M8 7V5a2 2 0 012-2h4.586a1 1 0 01.707.293l4.414 4.414a1 1 0 01.293.707V15a2 2 0 01-2 2h-2M8 7H6a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2v-2"/>
        </svg>
        <span>Copiar</span>
      `;
      copyButton.className = 'code-button';
      
      copyButton.onclick = async () => {
        const code = pre.querySelector('code')?.textContent || '';
        await navigator.clipboard.writeText(code);
        
        copyButton.innerHTML = `
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"/>
          </svg>
          <span>¡Copiado!</span>
        `;
        copyButton.classList.add('copied');
        
        setTimeout(() => {
          copyButton.innerHTML = `
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7v8a2 2 0 002 2h6M8 7V5a2 2 0 012-2h4.586a1 1 0 01.707.293l4.414 4.414a1 1 0 01.293.707V15a2 2 0 01-2 2h-2M8 7H6a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2v-2"/>
            </svg>
            <span>Copiar</span>
          `;
          copyButton.classList.remove('copied');
        }, 2000);
      };

      actions.appendChild(copyButton);
      pre.appendChild(actions);
    });
  };

  // Modo lectura
  const handleReadingMode = () => {
    const toggle = document.getElementById('reading-mode');
    if (!toggle) return;

    toggle.addEventListener('click', () => {
      document.body.classList.toggle('reading-mode');
      
      const isActive = document.body.classList.contains('reading-mode');
      localStorage.setItem('reading-mode', isActive ? 'true' : 'false');
      
      // Cambiar ícono del botón
      toggle.style.transform = isActive ? 'scale(1.1)' : 'scale(1)';
      toggle.style.backgroundColor = isActive ? 'rgb(59 130 246)' : '';
      toggle.style.color = isActive ? 'white' : '';
    });

    // Restaurar preferencia
    if (localStorage.getItem('reading-mode') === 'true') {
      document.body.classList.add('reading-mode');
      toggle.style.backgroundColor = 'rgb(59 130 246)';
      toggle.style.color = 'white';
    }
  };

  // Botón de compartir
  const handleShare = () => {
    const shareBtn = document.getElementById('share-btn');
    if (!shareBtn) return;

    shareBtn.addEventListener('click', async () => {
      const title = document.title;
      const url = window.location.href;
      
      if (navigator.share) {
        try {
          await navigator.share({ title, url });
        } catch (err) {
          console.log('Error sharing:', err);
        }
      } else {
        // Fallback: copiar URL al portapapeles
        await navigator.clipboard.writeText(url);
        
        // Mostrar feedback visual
        const originalHTML = shareBtn.innerHTML;
        shareBtn.innerHTML = `
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"/>
          </svg>
        `;
        shareBtn.style.backgroundColor = 'rgb(34 197 94)';
        shareBtn.style.color = 'white';
        
        setTimeout(() => {
          shareBtn.innerHTML = originalHTML;
          shareBtn.style.backgroundColor = '';
          shareBtn.style.color = '';
        }, 2000);
      }
    });
  };

  // Cálculo automático del tiempo de lectura
  const calculateReadingTime = () => {
    const article = document.querySelector('.blog-content');
    if (!article) return;

    const text = article.textContent || '';
    const wordCount = text.split(/\s+/).length;
    const readingTime = Math.ceil(wordCount / 200); // 200 palabras por minuto

    const timeElement = document.querySelector('.reading-time');
    if (timeElement) {
      timeElement.textContent = `${readingTime} min lectura`;
    }
  };

  // Inicialización
  document.addEventListener('DOMContentLoaded', () => {
    processReferences();
    processCodeBlocks();
    handleReadingMode();
    handleShare();
    calculateReadingTime();
  });
</script>